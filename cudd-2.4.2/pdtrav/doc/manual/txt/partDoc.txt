The part package

Partitioning Module

Gianpiero Cabodi and Stefano Quer

**********************************************************************

Part_BddDisjSuppPart()

Part_BddMultiwayLinearAndExist()
                               Compute the multiway and-exist over a
                               conjunctively partitioned     function

Part_EstimateCofactorComplex() Counts the number of nodes of the cofactors:
                               Fabio Somenzi Private Commnunication Solution.

Part_EstimateCofactorFast()    Count the number of nodes of the cofactors
                               using the fast     heuristic (TCAD'99)

Part_EstimateCofactorFreeOrder()
                               Count the number of nodes of the cofactors
                               using the Free     Order heuristic (TCAD'99).

Part_EstimateCofactor()        Counts the number of nodes of the cofactors:
                               Stefano Quer solution.

Part_MethodEnum2String()       Given an Enumerated type Returns a string.

Part_MethodString2Enum()       Given a string it Returns an Enumerated type

Part_PartitionDisjSet()        Partition a state set

Part_PartitionSetCudd()        Partition a state set

Part_PartitionSetInterface()   Interface Routine to Partition a state set

**********************************************************************

This <b>part</b> package provides functions to partition BDDs.     in a
discjunctive or conjunctive form. "Internal" partitioning routines     are
provided (see Cabodi et. al ICCAD'96, and Cabodi et. al TCAD - to
Appear). Moreover a link to Cudd partitioning routines is provided
too.<br>     The following method are actually provided:     <ul>
<li>PdTrav Methods       <ul>       <li>Part_MethodManual_c, partitioning
variable choose manually       <li>Part_MethodCofactor_c, use standard
cofactor to evaluate the       best splitting variable
<li>Part_MethodEstimate_c, use original ICCAD'96 method to estimate       the
codactors of a function       <li>Part_MethodEstimateComplex_c, modification
to the previous one       (Somenzi, Private Communication, 1996)
<li>Part_MethodEstimateFast_c, fast "linear" heuristic TCAD'99
<li>Part_MethodEstimateFreeOrder_c, heuristic to move from BDD       to FBDD
(TCAD'99)       <li>Part_MethodComparison_c, comparison routine (debugging
purpose       mainly).       </ul>     To notice that up to now (June 01,
1999) not all the funcions     are tested, as they have been taken, sometimes
too verbatim, from     old code versions.     <li>Cudd Based Methods
<ul>       <li>Part_MethodAppCon_c, routine Cudd_bddApproxConjDecomp
<li>Part_MethodAppDis_c, routine Cudd_bddApproxDisjDecomp
<li>Part_MethodGenCon_c, routine Cudd_bddGenConjDecomp
<li>Part_MethodGenDis_c, routine Cudd_bddGenDisjDecomp
<li>Part_MethodIteCon_c, routine Cudd_bddIterConjDecomp
<li>Part_MethodIteDis_c, routine Cudd_bddIterDisjDecomp
<li>Part_MethodVarCon_c, routine Cudd_bddVarConjDecomp
<li>Part_MethodVarDis_c, routine Cudd_bddVarDisjDecomp       </ul>    see
Cudd for further details.    </ul>    These methods are called with the
command option:<br>    none, manual, cofactor, estimate, complex, fast, free,
comparison, cuddAppCon, cuddAppDis, cuddGenCon, cuddGenDis,    cuddIteCon,
cuddIteDis, cuddVarCon, cuddVarDis.<br>    Notice that this module contains
both a direct link both to the ddi    and to the cudd package.<br>    This
structure should be revised.

Ddi_Bdd_t *
Part_BddDisjSuppPart(
  Ddi_Bdd_t *       f,               a BDD
  Ddi_Bdd_t *       TR,              a Clustered Transition Relation
  Ddi_Vararray_t *  psv,             array of present state variables
  Ddi_Vararray_t *  nsv,             array of next state variables
  int               verbosity        level of verbosity
)

  Side Effects: none

Ddi_Bdd_t *
Part_BddMultiwayLinearAndExist(
  Ddi_Bdd_t *       FPart,           Input partitioned function
  Ddi_Varset_t *    smoothV,         Var Set
  int               threshold        Size threshold for result factor
)
  Compute the multiway and-exist over a conjunctively partitioned function

  Side Effects: none

int
Part_EstimateCofactorComplex(
  Ddi_Bdd_t *       f,               Input BDD
  Ddi_Bdd_t *       topVar           Top Variable
)
  Counts the number of nodes of the cofactors: Fabio Somenzi Private
  Commnunication Solution.

  Side Effects: none

int
Part_EstimateCofactorFast(
  Ddi_Bdd_t *       f,
  int               LeftRight,
  Ddi_Varset_t *    supp,
  int               suppSize,
  int *             totalArray,
  int *             thenArray,
  int *             elseArray
)
  Count the number of nodes of the cofactors using the fast heuristic
  (TCAD'99)

  Side Effects: None

int
Part_EstimateCofactorFreeOrder(
  Ddi_Bdd_t *       f,               Input BDD
  Ddi_Bdd_t *       topVar,          Top Variable
  Ddi_Varset_t *    supp,
  int *             vet
)
  Count the number of nodes of the cofactors using the Free Order heuristic
  (TCAD'99).

  Side Effects: None

int
Part_EstimateCofactor(
  Ddi_Bdd_t *       f,               Input BDD
  Ddi_Bdd_t *       topVar           Top Variable
)
  Counts the number of nodes of the cofactors: Stefano Quer solution.

  Side Effects: None

char *
Part_MethodEnum2String(
  Part_Method_e     enumType
)
  Given an Enumerated type Returns a string.

  Side Effects: none

Part_Method_e
Part_MethodString2Enum(
  char *            string           String to Analyze
)
  It receives a string; to facilitate the user that string can be an easy-to-
  remember predefined code or an integer number (interpreted as a string). It
  returns the verbosity enumerated type.

  Side Effects: none

Ddi_Bdd_t *
Part_PartitionDisjSet(
  Ddi_Bdd_t *       f,               Input BDD
  Ddi_Varset_t *    careVars,        Set of Vars
  Part_Method_e     partitionMethod, Partition Method
  int               threshold,       Threshold Size
  Pdtutil_VerbLevel verbosity        Verbosity Level
)
  Partition a state set

  Side Effects: none

Ddi_Bdd_t *
Part_PartitionSetCudd(
  Ddi_Bdd_t *       f,               Input BDD
  Part_Method_e     partitionMethod, Partition Method
  int               threshold,       Threshold Size
  Pdtutil_VerbLevel verbosity        Verbosity Level
)
  This function derives from the Part_PartitionDisjSet function. It is
  rewritten here for two reasons: <ul> <li> this file includes the direct
  calls to the routine implemented in the Cudd package, <li> this file
  includes both disjunctive and conjuctive decompositions. </ul>

  Side Effects: none

Ddi_Bdd_t *
Part_PartitionSetInterface(
  Ddi_Bdd_t *       f,               Input BDD
  Ddi_Varset_t *    careVars,        Set of Vars
  Part_Method_e     partitionMethod, Partition Method
  int               threshold,       Threshold Size
  Pdtutil_VerbLevel verbosity        Verbosity Level
)
  It calls Part_PartitionDisjSet (to partition a BDD using "internal"
  routines) or Part_PartitionSetCudd (to partition a BDD using the CUDD
  routines.

  Side Effects: none

